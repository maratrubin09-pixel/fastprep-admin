import React, { useState, useEffect, useRef } from 'react';
import {
  Paper,
  Typography,
  Box,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  Divider,
  CircularProgress,
  Alert,
  Chip,
  TextField,
  Button,
  Stack,
  IconButton,
} from '@mui/material';
import {
  Telegram as TelegramIcon,
  WhatsApp as WhatsAppIcon,
  Instagram as InstagramIcon,
  Facebook as FacebookIcon,
  Send as SendIcon,
  Done as DoneIcon,
  DoneAll as DoneAllIcon,
  KeyboardArrowDown as KeyboardArrowDownIcon,
  AttachFile as AttachFileIcon,
  ArrowBack as ArrowBackIcon,
  Archive as ArchiveIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
} from '@mui/icons-material';
import { useMediaQuery as useMuiMediaQuery } from '@mui/material';
import { io } from 'socket.io-client';
import Linkify from 'linkify-react';
import DashboardLayout from '../components/DashboardLayout';
import FileUpload from '../components/FileUpload';
import NewChatModal from '../components/NewChatModal';
import { MOBILE_MAX, TABLET_MAX } from '../utils/breakpoints';

const API_URL = process.env.REACT_APP_API_URL || 'https://fastprep-admin-api.onrender.com';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
const MediaPreview = ({ objectKey }) => {
  const [imageUrl, setImageUrl] = useState(null);
  const [isImage, setIsImage] = useState(false);
  const [loading, setLoading] = useState(true);
  const [openModal, setOpenModal] = useState(false);

  React.useEffect(() => {
    if (!objectKey) {
      setLoading(false);
      return;
    }

    console.log('üñºÔ∏è MediaPreview loading objectKey:', objectKey);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    const extension = objectKey.split('.').pop()?.toLowerCase();
    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'heic', 'heif', 'bmp', 'svg'];
    const isImg = imageExtensions.includes(extension || '');

    setIsImage(isImg);

    if (isImg) {
      // –ü–æ–ª—É—á–∞–µ–º presigned URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à backend
      const token = localStorage.getItem('token');
      const downloadUrl = `${API_URL}/api/inbox/uploads/download/${encodeURIComponent(objectKey)}?url=true`;
      
      console.log('üîó Requesting presigned URL:', downloadUrl);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º presigned URL –Ω–∞–ø—Ä—è–º—É—é
      fetch(downloadUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })
        .then(res => {
          console.log('üì• Presigned URL response status:', res.status);
          if (!res.ok) {
            throw new Error(`HTTP ${res.status}: ${res.statusText}`);
          }
          return res.json();
        })
        .then(data => {
          console.log('‚úÖ Got presigned URL:', data.url?.substring(0, 50) + '...');
          setImageUrl(data.url);
        })
        .catch(err => {
          console.error('‚ùå Failed to get image URL:', err);
          // Fallback - –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ download endpoint
          setImageUrl(`${API_URL}/api/inbox/uploads/download/${encodeURIComponent(objectKey)}`);
        })
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, [objectKey]);

  const handleDownload = () => {
    const token = localStorage.getItem('token');
    const downloadUrl = `${API_URL}/api/inbox/uploads/download/${encodeURIComponent(objectKey)}`;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    fetch(downloadUrl, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    })
      .then(res => res.url)
      .then(url => {
        const link = document.createElement('a');
        link.href = url;
        link.target = '_blank';
        link.download = objectKey.split('/').pop() || 'file';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      })
      .catch(err => {
        console.error('Download error:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
      });
  };

  if (loading) {
    return <CircularProgress size={20} />;
  }

  if (isImage && imageUrl) {
    return (
      <>
        <Box
          sx={{
            position: 'relative',
            maxWidth: '100%',
            cursor: 'pointer',
            '&:hover': { opacity: 0.9 },
          }}
          onClick={() => setOpenModal(true)}
        >
          <img
            src={imageUrl}
            alt="Attachment"
            style={{
              maxWidth: '200px',
              maxHeight: '200px',
              borderRadius: '8px',
              objectFit: 'cover',
            }}
            onError={(e) => {
              console.error('‚ùå Failed to load image:', imageUrl);
              console.error('Error event:', e);
              setIsImage(false);
              setImageUrl(null);
            }}
            onLoad={() => {
              console.log('‚úÖ Image loaded successfully:', objectKey);
            }}
          />
        </Box>
        {openModal && (
          <Box
            onClick={() => setOpenModal(false)}
            sx={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0,0,0,0.9)',
              zIndex: 1300,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              cursor: 'pointer',
            }}
          >
            <img
              src={imageUrl}
              alt="Full size"
              style={{
                maxWidth: '90%',
                maxHeight: '90%',
                objectFit: 'contain',
              }}
              onClick={(e) => e.stopPropagation()}
            />
          </Box>
        )}
      </>
    );
  }

  // –î–ª—è –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  return (
    <Button
      variant="outlined"
      size="small"
      startIcon={<AttachFileIcon />}
      onClick={handleDownload}
      sx={{ mt: 1 }}
    >
      –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
    </Button>
  );
};

const platformIcons = {
  telegram: <TelegramIcon sx={{ color: '#0088cc' }} />,
  whatsapp: <WhatsAppIcon sx={{ color: '#25D366' }} />,
  instagram: <InstagramIcon sx={{ color: '#E4405F' }} />,
  facebook: <FacebookIcon sx={{ color: '#1877F2' }} />,
};

const InboxPage = () => {
  const location = useLocation();
  const [conversations, setConversations] = useState([]);
  const [selectedThread, setSelectedThread] = useState(null);
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [messageText, setMessageText] = useState('');
  const [sending, setSending] = useState(false);
  const [attachedFileKey, setAttachedFileKey] = useState(null);
  const [fileUploadResetKey, setFileUploadResetKey] = useState(0);
  const socketRef = useRef(null);
  const messageInputRef = useRef(null);
  const messagesEndRef = useRef(null);
  const selectedThreadRef = useRef(null);
  const messagesContainerRef = useRef(null);
  const [showScrollToBottom, setShowScrollToBottom] = useState(false);
  const [isEditingName, setIsEditingName] = useState(false);
  const [editedName, setEditedName] = useState('');
  const [newChatModalOpen, setNewChatModalOpen] = useState(false);
  
  // Responsive design
  const isMobile = useMuiMediaQuery(`(max-width: ${MOBILE_MAX}px)`);
  const isTablet = useMuiMediaQuery(`(min-width: ${MOBILE_MAX + 1}px) and (max-width: ${TABLET_MAX}px)`);
  const [showChat, setShowChat] = useState(false); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫
  
  // Get platform from URL pathname
  const getPlatformFromPath = () => {
    const path = location.pathname;
    if (path.includes('/whatsapp')) return 'whatsapp';
    if (path.includes('/telegram')) return 'telegram';
    if (path.includes('/instagram')) return 'instagram';
    if (path.includes('/facebook')) return 'facebook';
    return null; // 'All Messages' - no filter
  };

  // Fetch conversations on mount and when pathname changes
  useEffect(() => {
    fetchConversations();
  }, [location.pathname]);

  // Setup WebSocket connection (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç selectedThread!)
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) return;

    // Decode JWT to get userId (simple base64 decode)
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const userId = payload.sub || payload.id;

      // Connect to WebSocket
      const socket = io(`${API_URL}/ws`, {
        auth: {
          userId: userId,
          token: token,
        },
      });

      socket.on('connect', () => {
        console.log('‚úÖ WebSocket connected');
      });

      socket.on('hello', (data) => {
        console.log('üëã Hello from server:', data);
      });

      // Handle incoming messages
      socket.on('new_message', (data) => {
        console.log('üì® New message received via WebSocket:', data);
        
        if (!data || !data.conversationId || !data.message) {
          console.warn('‚ö†Ô∏è Invalid new_message data:', data);
          return;
        }

        const isIncoming = data.message.direction === 'in';
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —á–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç)
        if (isIncoming && selectedThreadRef.current?.id !== data.conversationId) {
          // –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
          if ('Notification' in window && Notification.permission === 'granted') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setConversations callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            setConversations(prev => {
              const conv = prev.find(c => c.id === data.conversationId);
              const convTitle = conv?.chat_title || data.message.sender_name || 'New message';
              new Notification(convTitle, {
                body: data.message.text || 'New message',
                icon: '/favicon.ico',
                tag: data.conversationId, // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
              });
              return prev; // –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            });
          } else if ('Notification' in window && Notification.permission === 'default') {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            Notification.requestPermission();
          }
        }

        // Update conversations list FIRST (move to top and update last_message_at)
        setConversations(prev => {
          const existingConv = prev.find(conv => conv.id === data.conversationId);
          
          if (existingConv) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
            const updated = prev.map(conv => {
              if (conv.id === data.conversationId) {
                return {
                  ...conv,
                  last_message_at: data.message.created_at,
                  unread_count: isIncoming && selectedThreadRef.current?.id !== data.conversationId
                    ? (conv.unread_count || 0) + 1
                    : conv.unread_count || 0
                };
              }
              return conv;
            });
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ last_message_at (–±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
            const sorted = updated.sort((a, b) => {
              const dateA = new Date(a.last_message_at || a.created_at || 0).getTime();
              const dateB = new Date(b.last_message_at || b.created_at || 0).getTime();
              return dateB - dateA;
            });
            return sorted;
          } else {
            // –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π), –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            console.log('üîÑ Conversation not in list, fetching updated list...');
            fetchConversations();
            return prev;
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º ref) –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        const currentThread = selectedThreadRef.current;
        const isSelected = currentThread?.id === data.conversationId;
        
        // Add message to current conversation if it's selected
        setMessages(prev => {
          if (!isSelected) {
            console.log(`‚è≠Ô∏è Message not added to UI (chat not selected): ${data.conversationId}`);
            return prev;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          const exists = prev.find(msg => msg.id === data.message.id);
          if (exists) {
            console.log(`‚è≠Ô∏è Message already exists: ${data.message.id}`);
            return prev;
          }
          
          console.log(`‚úÖ Adding message to UI: ${data.message.id}`);
          return [...prev, data.message];
        });
        
        // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
        if (isSelected) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
          // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
          requestAnimationFrame(() => {
            setTimeout(() => {
              if (messagesContainerRef.current) {
                const container = messagesContainerRef.current;
                const scrollTo = container.scrollHeight;
                container.scrollTop = scrollTo;
                // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ scrollIntoView –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                if (messagesEndRef.current) {
                  messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
                }
              } else if (messagesEndRef.current) {
                messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
              }
            }, 50);
            
            // –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 200ms –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            setTimeout(() => {
              if (messagesContainerRef.current) {
                const container = messagesContainerRef.current;
                container.scrollTop = container.scrollHeight;
              } else if (messagesEndRef.current) {
                messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
              }
            }, 200);
          });
        }
      });

      // Handle message status updates
      socket.on('message_status_update', (data) => {
        console.log('üìä Message status update:', data);
        
        // Update message status in current conversation
        setMessages(prev => {
          const currentThread = selectedThreadRef.current;
          const isSelected = currentThread?.id === data.conversationId;
          if (!isSelected) return prev;
          
          return prev.map(msg => 
            msg.id === data.messageId 
              ? { ...msg, delivery_status: data.status }
              : msg
          );
        });
      });

      socket.on('disconnect', () => {
        console.log('‚ùå WebSocket disconnected');
      });

      socketRef.current = socket;

      // Cleanup on unmount
      return () => {
        socket.disconnect();
      };
    } catch (err) {
      console.error('Failed to setup WebSocket:', err);
    }
  }, []); // –£–±—Ä–∞–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç selectedThread - —Å–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedThread
  useEffect(() => {
    selectedThreadRef.current = selectedThread;
  }, [selectedThread]);

  // Fetch messages when thread is selected
  useEffect(() => {
    if (selectedThread) {
      fetchMessages(selectedThread.id);
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      setTimeout(() => {
        if (messagesEndRef.current) {
          messagesEndRef.current.scrollIntoView({ behavior: 'auto' });
        }
      }, 100);
    }
  }, [selectedThread]);

  // –£–º–Ω–∞—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–Ω–∏–∑—É
  // –ù–ï –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤–≤–µ—Ä—Ö (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
  useEffect(() => {
    if (!messagesContainerRef.current || messages.length === 0 || !selectedThread) return;

    const container = messagesContainerRef.current;
    const scrollHeight = container.scrollHeight;
    const scrollTop = container.scrollTop;
    const clientHeight = container.clientHeight;
    const isNearBottom = scrollHeight - scrollTop - clientHeight < 150; // –ü–æ—Ä–æ–≥ 150px

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–Ω–∏–∑—É (–Ω–µ –º–µ—à–∞–µ–º —á—Ç–µ–Ω–∏—é —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if (isNearBottom && messagesEndRef.current) {
      requestAnimationFrame(() => {
        setTimeout(() => {
          if (messagesEndRef.current && messagesContainerRef.current) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π scrollTop –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const container = messagesContainerRef.current;
            container.scrollTop = container.scrollHeight;
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º scrollIntoView –∫–∞–∫ fallback
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      });
    }
  }, [messages, selectedThread]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑"
  useEffect(() => {
    if (!messagesContainerRef.current) return;

    const container = messagesContainerRef.current;
    const checkScroll = () => {
      const isNearBottom = container.scrollHeight - container.scrollTop - container.clientHeight < 100;
      setShowScrollToBottom(!isNearBottom);
    };

    container.addEventListener('scroll', checkScroll);
    checkScroll(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É

    return () => container.removeEventListener('scroll', checkScroll);
  }, [selectedThread, messages]);

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const fetchConversations = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      const platform = getPlatformFromPath();
      const url = platform 
        ? `${API_URL}/api/inbox/conversations?platform=${platform}`
        : `${API_URL}/api/inbox/conversations`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch conversations');
      }
      
      const data = await response.json();
      setConversations(data);
      
      // Auto-select first conversation
      if (data.length > 0 && !selectedThread) {
        setSelectedThread(data[0]);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchMessages = async (threadId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_URL}/api/inbox/conversations/${threadId}/messages`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch messages');
      }
      
      const data = await response.json();
      setMessages(data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
      setConversations(prev => 
        prev.map(conv => 
          conv.id === threadId ? { ...conv, unread_count: 0 } : conv
        )
      );
    } catch (err) {
      console.error('Failed to fetch messages:', err);
    }
  };

  const sendMessage = async () => {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ input —á–µ—Ä–µ–∑ ref
    const text = messageInputRef.current?.value || messageText;
    console.log('üîç Frontend sendMessage - text:', text, 'from ref:', messageInputRef.current?.value, 'from state:', messageText);
    
    if ((!text.trim() && !attachedFileKey) || !selectedThread) {
      console.warn('‚ö†Ô∏è Cannot send message: no text and no file, or no thread selected');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å attachedFileKey, –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
    if (attachedFileKey && !attachedFileKey.startsWith('inbox/')) {
      console.error('‚ùå Invalid objectKey format:', attachedFileKey);
      alert('–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    try {
      setSending(true);
      const token = localStorage.getItem('token');
      const requestBody = {
        text: text || '', // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª
        objectKey: attachedFileKey || undefined,
      };
      
      console.log('üì§ Sending message request:', {
        threadId: selectedThread.id,
        text: text || '(empty)',
        attachedFileKey: attachedFileKey || '(none)',
        requestBody,
      });
      
      const response = await fetch(`${API_URL}/api/inbox/conversations/${selectedThread.id}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to send message');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const newMessage = await response.json();
      console.log('üì§ New message from server:', newMessage);
      console.log('üì§ Object key:', newMessage.object_key || newMessage.objectKey);
      
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "queued" (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...)
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const messageToAdd = {
        ...newMessage,
        object_key: newMessage.object_key || newMessage.objectKey, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        direction: 'out',
      };
      setMessages(prev => [...prev, messageToAdd]);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç (–¥–ª—è —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)
      if (text.trim()) {
        console.log('‚úÖ Message sent successfully');
      }
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–µ
      setMessageText('');
      setAttachedFileKey(null);
      setFileUploadResetKey(prev => prev + 1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º FileUpload –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      if (messageInputRef.current) {
        messageInputRef.current.value = '';
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –Ω–∞–≤–µ—Ä—Ö)
      setConversations(prev => {
        const updated = prev.map(conv => 
          conv.id === selectedThread.id 
            ? { ...conv, last_message_at: new Date().toISOString() }
            : conv
        );
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ last_message_at
        return updated.sort((a, b) => 
          new Date(b.last_message_at || b.created_at) - new Date(a.last_message_at || a.created_at)
        );
      });
    } catch (err) {
      console.error('‚ùå Failed to send message:', err);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const errorMessage = err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
      
      // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å toast-–±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π)
      if (window.confirm(`${errorMessage}\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É?`)) {
        // Retry –º–µ—Ö–∞–Ω–∏–∑–º
        setTimeout(() => sendMessage(), 1000);
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ UI
        setError(errorMessage);
        setTimeout(() => setError(null), 5000);
      }
    } finally {
      setSending(false);
    }
  };

  const getPlatformFromChannelId = (channelId) => {
    if (!channelId) return 'unknown';
    return channelId.split(':')[0] || 'unknown';
  };

  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) return 'Just now';
    if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
    return date.toLocaleDateString();
  };

  const handleEditName = () => {
    if (!selectedThread) return;
    setEditedName(selectedThread.custom_name || selectedThread.chat_title || '');
    setIsEditingName(true);
  };

  const handleSaveName = async () => {
    if (!selectedThread) return;
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Not authenticated');
      }

      const response = await fetch(`${API_URL}/api/inbox/conversations/${selectedThread.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ custom_name: editedName.trim() || null }),
      });

      if (!response.ok) {
        throw new Error('Failed to update conversation name');
      }

      // Update local state
      setSelectedThread({ ...selectedThread, custom_name: editedName.trim() || null });
      setConversations(prev => prev.map(conv => 
        conv.id === selectedThread.id 
          ? { ...conv, custom_name: editedName.trim() || null }
          : conv
      ));
      setIsEditingName(false);
    } catch (err) {
      alert('Failed to update conversation name: ' + err.message);
    }
  };

  const handleCancelEditName = () => {
    setIsEditingName(false);
    setEditedName('');
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleArchiveConversation = async () => {
    if (!selectedThread) return;
    
    if (!window.confirm('Are you sure you want to archive this conversation?')) {
      return;
    }

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Not authenticated');
      }

      const response = await fetch(`${API_URL}/api/inbox/conversations/${selectedThread.id}/archive`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to archive conversation');
      }

      // Remove from list and clear selection
      setConversations(prev => prev.filter(conv => conv.id !== selectedThread.id));
      setSelectedThread(null);
      setMessages([]);
    } catch (err) {
      alert('Failed to archive conversation: ' + err.message);
    }
  };


  if (loading) {
    return (
      <DashboardLayout title="Unified Inbox">
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
          <CircularProgress />
        </Box>
      </DashboardLayout>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ snackbar/alert –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω
  const showErrorAlert = error && (
    <Box
      sx={{
        position: 'fixed',
        bottom: 16,
        left: '50%',
        transform: 'translateX(-50%)',
        zIndex: 1400,
      }}
    >
      <Alert 
        severity="error" 
        onClose={() => setError(null)}
        sx={{ minWidth: 300 }}
      >
        {error}
      </Alert>
    </Box>
  );

  if (conversations.length === 0) {
    return (
      <DashboardLayout title="Unified Inbox">
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" color="text.secondary">
            No conversations yet
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            Messages from Telegram, WhatsApp, Instagram, and Facebook will appear here
          </Typography>
        </Paper>
      </DashboardLayout>
    );
  }

  const handleNewChatSuccess = (conversation) => {
    // Add to conversations list and select it
    setConversations(prev => [conversation, ...prev]);
    setSelectedThread(conversation);
    if (isMobile) {
      setShowChat(true);
    }
  };

  return (
    <DashboardLayout title="Unified Inbox" onNewChatClick={() => setNewChatModalOpen(true)}>
      {showErrorAlert}
      <NewChatModal
        open={newChatModalOpen}
        onClose={() => setNewChatModalOpen(false)}
        onSuccess={handleNewChatSuccess}
      />
      <Box sx={{ 
        display: 'flex', 
        gap: 2, 
        height: 'calc(100vh - 200px)',
        flexDirection: isMobile && showChat ? 'column' : 'row',
      }}>
        {/* Conversations List */}
        <Paper sx={{ 
          width: isMobile ? '100%' : isTablet ? '300px' : '350px',
          overflow: 'auto',
          display: isMobile && showChat ? 'none' : 'block',
          height: isMobile ? '100%' : 'auto',
        }}>
          <Box sx={{ p: 2, borderBottom: '1px solid', borderColor: 'divider' }}>
            <Typography variant="h6" fontWeight="bold">
              Conversations
            </Typography>
          </Box>
          <List sx={{ p: 0 }}>
            {conversations.map((conv) => {
              const platform = getPlatformFromChannelId(conv.channel_id);
              return (
                <React.Fragment key={conv.id}>
                  <ListItem
                    button
                    selected={selectedThread?.id === conv.id}
                    onClick={() => {
                      setSelectedThread(conv);
                      if (isMobile) {
                        setShowChat(true); // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
                      }
                    }}
                    sx={{
                      '&.Mui-selected': {
                        backgroundColor: '#E8EAF6', // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –≤–º–µ—Å—Ç–æ —è—Ä–∫–æ–≥–æ
                        color: '#6A1B9A', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                        '&:hover': {
                          backgroundColor: '#E8EAF6',
                        },
                      },
                      backgroundColor: conv.unread_count > 0 ? 'action.hover' : 'transparent',
                      fontWeight: conv.unread_count > 0 ? 'bold' : 'normal',
                    }}
                  >
                    <ListItemAvatar>
                      <Avatar>
                        {platformIcons[platform] || 'üí¨'}
                      </Avatar>
                    </ListItemAvatar>
                    <ListItemText
                      primary={
                        <Box display="flex" justifyContent="space-between" alignItems="center" gap={1}>
                          <Typography variant="subtitle1" fontWeight="bold">
                            {conv.custom_name || conv.chat_title || conv.external_chat_id || 'Unknown'}
                          </Typography>
                          <Chip
                            label={platform}
                            size="small"
                            sx={{ textTransform: 'capitalize' }}
                          />
                        </Box>
                      }
                      secondary={
                        <Box display="flex" justifyContent="space-between" alignItems="center">
                          <Typography variant="caption">
                            {formatTime(conv.last_message_at || conv.created_at)}
                          </Typography>
                          {conv.unread_count > 0 && (
                            <Chip
                              label={conv.unread_count}
                              size="small"
                              color="primary"
                              sx={{ ml: 1, minWidth: 20, height: 20, fontSize: '0.7rem' }}
                            />
                          )}
                        </Box>
                      }
                    />
                  </ListItem>
                  <Divider />
                </React.Fragment>
              );
            })}
          </List>
        </Paper>

        {/* Messages Area */}
        <Paper sx={{ 
          flex: 1, 
          display: isMobile && !showChat ? 'none' : 'flex',
          flexDirection: 'column',
          position: isMobile ? 'fixed' : 'relative',
          top: isMobile ? 0 : 'auto',
          left: isMobile ? 0 : 'auto',
          right: isMobile ? 0 : 'auto',
          bottom: isMobile ? 0 : 'auto',
          width: isMobile ? '100%' : 'auto',
          height: isMobile ? '100vh' : 'auto',
          zIndex: isMobile ? 1300 : 'auto',
        }}>
          {selectedThread ? (
            <>
              {/* Header */}
              <Box sx={{ p: 2, borderBottom: '1px solid', borderColor: 'divider' }}>
                <Box display="flex" alignItems="center" gap={1}>
                  {isMobile && (
                    <IconButton
                      onClick={() => {
                        setShowChat(false);
                        setSelectedThread(null);
                      }}
                      sx={{ mr: 1 }}
                    >
                      <ArrowBackIcon />
                    </IconButton>
                  )}
                  <Avatar>
                    {platformIcons[getPlatformFromChannelId(selectedThread.channel_id)] || 'üí¨'}
                  </Avatar>
                  <Box sx={{ flex: 1 }}>
                    {isEditingName ? (
                      <TextField
                        value={editedName}
                        onChange={(e) => setEditedName(e.target.value)}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            handleSaveName();
                          } else if (e.key === 'Escape') {
                            handleCancelEditName();
                          }
                        }}
                        size="small"
                        autoFocus
                        sx={{ mb: 0.5 }}
                      />
                    ) : (
                      <Typography 
                        variant="h6" 
                        fontWeight="bold"
                        sx={{ cursor: 'pointer', '&:hover': { opacity: 0.7 } }}
                        onClick={handleEditName}
                      >
                        {selectedThread.custom_name || selectedThread.chat_title || selectedThread.external_chat_id || 'Unknown'}
                      </Typography>
                    )}
                    <Typography variant="caption" color="text.secondary">
                      {selectedThread.channel_id}
                    </Typography>
                  </Box>
                  {isEditingName ? (
                    <>
                      <IconButton
                        onClick={handleSaveName}
                        sx={{ color: 'primary.main' }}
                        title="Save"
                      >
                        <SaveIcon />
                      </IconButton>
                      <IconButton
                        onClick={handleCancelEditName}
                        sx={{ color: 'text.secondary' }}
                        title="Cancel"
                      >
                        <CancelIcon />
                      </IconButton>
                    </>
                  ) : (
                    <>
                      <IconButton
                        onClick={handleEditName}
                        sx={{ color: 'text.secondary' }}
                        title="Edit name"
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        onClick={handleArchiveConversation}
                        sx={{ color: 'text.secondary' }}
                        title="Archive conversation"
                      >
                        <ArchiveIcon />
                      </IconButton>
                    </>
                  )}
                </Box>
              </Box>

              {/* Messages */}
              <Box 
                ref={messagesContainerRef}
                sx={{ 
                  flex: 1, 
                  overflow: 'auto', 
                  p: 2, 
                  position: 'relative',
                  backgroundColor: '#F8F9FA', // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞
                }}
              >
                {showScrollToBottom && (
                  <Button
                    variant="contained"
                    size="small"
                    onClick={scrollToBottom}
                    sx={{
                      position: 'absolute',
                      bottom: 16,
                      right: 16,
                      zIndex: 10,
                      minWidth: 'auto',
                      borderRadius: '50%',
                      width: 40,
                      height: 40,
                      boxShadow: 3,
                    }}
                  >
                    <KeyboardArrowDownIcon />
                  </Button>
                )}
                {messages.length === 0 ? (
                  <Typography variant="body2" color="text.secondary" textAlign="center" sx={{ mt: 4 }}>
                    No messages yet
                  </Typography>
                ) : (
                  <Stack spacing={2}>
                    {messages.map((msg) => (
                      <Box
                        key={msg.id}
                        sx={{
                          display: 'flex',
                          justifyContent: msg.direction === 'out' ? 'flex-end' : 'flex-start',
                        }}
                      >
                        <Paper
                          sx={{
                            p: 2,
                            maxWidth: '70%',
                            backgroundColor: msg.direction === 'out' ? '#E1BEE7' : 'white', // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö, –±–µ–ª—ã–π –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö
                            color: msg.direction === 'out' ? '#6A1B9A' : 'text.primary', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –±–µ–ª–æ–≥–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                            border: msg.direction === 'in' ? '1px solid #e0e0e0' : '2px solid #BA68C8', // –§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö
                            boxShadow: msg.direction === 'in' ? '0 1px 2px rgba(0,0,0,0.05)' : '0 1px 3px rgba(156,39,176,0.15)', // –ú—è–≥–∫–∏–µ —Ç–µ–Ω–∏
                            wordWrap: 'break-word',
                            overflowWrap: 'break-word',
                            '& .message-link': {
                              wordBreak: 'break-all',
                              overflowWrap: 'anywhere',
                              '& a': {
                                color: msg.direction === 'out' ? '#6A1B9A' : '#9C27B0', // –¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö (–ª—É—á—à–µ —á–∏—Ç–∞–µ—Ç—Å—è), —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö
                                textDecoration: 'underline',
                                fontWeight: 500, // –ß—É—Ç—å –∂–∏—Ä–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                                wordBreak: 'break-all',
                                overflowWrap: 'anywhere',
                                '&:hover': {
                                  opacity: 0.7,
                                  textDecoration: 'underline',
                                },
                              },
                            },
                          }}
                        >
                          {msg.sender_name && msg.direction === 'in' && (
                            <Typography variant="caption" fontWeight="bold" display="block" sx={{ mb: 0.5 }}>
                              {msg.sender_name}
                            </Typography>
                          )}
                          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
                          {(msg.object_key || msg.objectKey) && (
                            <Box sx={{ mb: 1 }}>
                              <MediaPreview objectKey={msg.object_key || msg.objectKey} />
                            </Box>
                          )}
                          {msg.metadata?.attachments && msg.metadata.attachments.length > 0 && (
                            <Box sx={{ mb: 1 }}>
                              {msg.metadata.attachments.map((att, idx) => (
                                <Box key={idx} sx={{ mb: 1 }}>
                                  {att.type === 'photo' && (
                                    <Typography variant="caption" display="block">üì∑ Photo</Typography>
                                  )}
                                  {att.type === 'video' && (
                                    <Typography variant="caption" display="block">üé• Video</Typography>
                                  )}
                                  {att.type === 'voice' && (
                                    <Typography variant="caption" display="block">üé§ Voice message</Typography>
                                  )}
                                  {att.type === 'audio' && (
                                    <Typography variant="caption" display="block">üéµ Audio: {att.fileName || 'audio'}</Typography>
                                  )}
                                  {att.type === 'document' && (
                                    <Typography variant="caption" display="block">üìé {att.fileName || 'Document'}</Typography>
                                  )}
                                  {att.type === 'sticker' && (
                                    <Typography variant="caption" display="block">üòÄ Sticker</Typography>
                                  )}
                                  {att.caption && (
                                    <Typography variant="caption" display="block" sx={{ fontStyle: 'italic' }}>
                                      {att.caption}
                                    </Typography>
                                  )}
                                </Box>
                              ))}
                            </Box>
                          )}
                          <Typography 
                            variant="body1" 
                            component="div"
                            sx={{
                              wordWrap: 'break-word',
                              overflowWrap: 'break-word',
                              wordBreak: 'break-word',
                            }}
                          >
                            <Linkify
                              options={{
                                target: '_blank',
                                rel: 'noopener noreferrer',
                                className: 'message-link',
                              }}
                            >
                              {msg.text}
                            </Linkify>
                          </Typography>
                          <Box
                            sx={{
                              display: 'flex',
                              alignItems: 'center',
                              gap: 0.5,
                              mt: 0.5,
                            }}
                          >
                            <Typography
                              variant="caption"
                              sx={{
                                opacity: 0.7,
                              }}
                            >
                              {formatTime(msg.created_at)}
                            </Typography>
                            {msg.direction === 'out' && (
                              <>
                                {msg.delivery_status === 'queued' && (
                                  <DoneIcon sx={{ fontSize: 14, opacity: 0.5, color: 'grey.400' }} />
                                )}
                                {msg.delivery_status === 'sending' && (
                                  <CircularProgress size={14} sx={{ opacity: 0.7 }} />
                                )}
                                {msg.delivery_status === 'sent' && (
                                  <DoneAllIcon sx={{ fontSize: 14, opacity: 0.7, color: 'primary.light' }} />
                                )}
                                {msg.delivery_status === 'delivered' && (
                                  <DoneAllIcon sx={{ fontSize: 14, opacity: 1, color: 'primary.main' }} />
                                )}
                                {msg.delivery_status === 'failed' && (
                                  <DoneIcon sx={{ fontSize: 14, opacity: 1, color: 'error.main' }} />
                                )}
                              </>
                            )}
                          </Box>
                        </Paper>
                      </Box>
                    ))}
                    {/* Ref –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
                    <div ref={messagesEndRef} />
                  </Stack>
                )}
              </Box>

              {/* Input */}
              <Box sx={{ p: 2, borderTop: '1px solid', borderColor: 'divider' }}>
                <Box display="flex" gap={1} alignItems="flex-end">
                  <FileUpload
                    threadId={selectedThread.id}
                    resetKey={fileUploadResetKey}
                    onFileUploaded={(objectKey) => {
                      console.log('üìé FileUpload callback: objectKey=', objectKey);
                      setAttachedFileKey(objectKey);
                      // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω (objectKey === null), –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                      if (objectKey === null) {
                        setAttachedFileKey(null);
                      }
                    }}
                    disabled={sending}
                  />
                  <TextField
                    inputRef={messageInputRef}
                    fullWidth
                    placeholder="Type a message..."
                    value={messageText}
                    onChange={(e) => setMessageText(e.target.value)}
                    onKeyDown={handleKeyDown}
                    multiline
                    maxRows={4}
                  />
                  <Button
                    variant="contained"
                    endIcon={<SendIcon />}
                    onClick={sendMessage}
                    disabled={(!messageText.trim() && !attachedFileKey) || sending}
                  >
                    {sending ? 'Sending...' : 'Send'}
                  </Button>
                </Box>
              </Box>
            </>
          ) : (
            <Box display="flex" justifyContent="center" alignItems="center" height="100%">
              <Typography variant="body1" color="text.secondary">
                Select a conversation to view messages
              </Typography>
            </Box>
          )}
        </Paper>
      </Box>
    </DashboardLayout>
  );
};

export default InboxPage;













