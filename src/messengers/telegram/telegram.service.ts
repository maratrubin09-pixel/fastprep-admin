import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { NewMessage } from 'telegram/events';
import { Api } from 'telegram/tl';
import bigInt from 'big-integer';
import axios from 'axios';
import * as path from 'path';
import * as fs from 'fs';
import * as os from 'os';
import { Gauge, register } from 'prom-client';
import { S3Service } from '../../storage/s3.service';
import { v4 as uuidv4 } from 'uuid';
import { get } from 'https';

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramService.name);
  private client: TelegramClient | null = null;
  private isReady = false;
  
  // Prometheus –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  private readonly connectionStatus: Gauge<string>;

  constructor(
    private s3Service: S3Service
  ) {
    this.connectionStatus = new Gauge({
      name: 'telegram_connection_status',
      help: 'Telegram connection status (1=OK, 0=Down)',
      registers: [register],
    });
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ 0 (–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    this.connectionStatus.set(0);
  }

  async onModuleInit() {
    // Only initialize persistent client in Worker (not API)
    // API will create temporary clients for QR code generation
    const isWorker = process.env.IS_WORKER === 'true';
    if (isWorker) {
      await this.initializeClient();
    } else {
      this.logger.log('‚è≠Ô∏è Skipping Telegram client initialization in API (Worker only)');
    }
  }

  async onModuleDestroy() {
    if (this.client) {
      await this.client.disconnect();
      this.connectionStatus.set(0); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –æ—Ç–∫–ª—é—á–µ–Ω–æ
      this.logger.log('üîå Telegram client disconnected');
    }
  }

  private async initializeClient() {
    const apiId = parseInt(process.env.TG_API_ID || '0', 10);
    const apiHash = process.env.TG_API_HASH || '';
    const tdlibDir = process.env.TDLIB_DIR || '/var/data/tdlib';
    const sessionFile = path.join(tdlibDir, 'session.txt');

    if (!apiId || !apiHash) {
      this.logger.warn('‚ö†Ô∏è TG_API_ID or TG_API_HASH not set. Telegram integration disabled.');
      return;
    }

    try {
      this.logger.log('üîê Initializing Telegram client...');
      this.logger.log(`üìÅ Session file: ${sessionFile}`);

      // Ensure directory exists
      if (!fs.existsSync(tdlibDir)) {
        fs.mkdirSync(tdlibDir, { recursive: true });
      }

      // Load session if exists
      let sessionString = '';
      if (fs.existsSync(sessionFile)) {
        sessionString = fs.readFileSync(sessionFile, 'utf8');
        this.logger.log('üìÇ Loaded existing session');
      }

      const stringSession = new StringSession(sessionString);

      this.client = new TelegramClient(stringSession, apiId, apiHash, {
        connectionRetries: 5,
      });

      await this.client.connect();

      // Check if authorized
      const authorized = await this.client.isUserAuthorized();
      
      if (authorized) {
        this.isReady = true;
        this.connectionStatus.set(1); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
        const me = await this.client.getMe();
        this.logger.log(`‚úÖ Telegram connected as: ${me.firstName} ${me.lastName || ''} (@${me.username || 'N/A'})`);

        // Save session
        const session = this.client.session.save() as unknown as string;
        fs.writeFileSync(sessionFile, session, 'utf8');

        // Listen for new messages (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!)
        this.client.addEventHandler(this.handleNewMessage.bind(this), new NewMessage({}));
        this.logger.log('üëÇ Event handler registered for incoming messages');
      } else {
        this.isReady = false;
        this.connectionStatus.set(0); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
        this.logger.warn(`‚ö†Ô∏è Telegram not authenticated.`);
        this.logger.warn('Run: npm run start:tg-login in Render Shell to authenticate');
      }

    } catch (error) {
      this.logger.error('‚ùå Failed to initialize Telegram client:', error);
      this.connectionStatus.set(0); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
  }

  private async handleNewMessage(event: any) {
    try {
      if (!event.message) {
        this.logger.debug('‚ö†Ô∏è Event without message, skipping');
        return;
      }

      const message = event.message;

      // Skip outgoing messages
      if (message.out) {
        this.logger.debug('üì§ Skipping outgoing message');
        return;
      }

      this.logger.log(`üì® New incoming message received from chat ${message.chatId}`);
      
      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π message –æ—Ç Telegram API
      this.logger.log(`üîç DEBUG: Raw message structure - chatId: ${message.chatId}, senderId: ${message.senderId?.userId || 'null'}`);
      this.logger.log(`üîç DEBUG: message._sender exists: ${!!message._sender}`);
      if (message._sender) {
        this.logger.log(`üîç DEBUG: message._sender structure: ${JSON.stringify({
          firstName: message._sender.firstName || null,
          lastName: message._sender.lastName || null,
          username: message._sender.username || null,
          phone: message._sender.phone || null,
          className: message._sender.className || null,
        })}`);
      }
      this.logger.log(`üîç DEBUG: this.client exists: ${!!this.client}, isReady: ${this.isReady}`);
      
      await this.processIncomingMessage(message);
    } catch (error) {
      this.logger.error('‚ùå Error handling new message:', error);
    }
  }

  private async processIncomingMessage(message: any) {
    try {
      const chatId = message.chatId || message.peerId?.userId;
      const messageId = message.id;
      const senderId = message.senderId?.userId;
      
      // Debug: log the message structure
      this.logger.debug(`üìã Raw message structure: ${JSON.stringify({
        text: message.text,
        message: message.message,
        type: typeof message.text,
        keys: Object.keys(message)
      })}`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      let text = message.message || message.text || '';
      const attachments: any[] = [];
      let objectKey: string | null = null; // S3 –∫–ª—é—á –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
      if (message.media && this.client) {
        const media = message.media;
        let mediaType: string | null = null;
        let mimeType: string | null = null;
        let fileName: string | null = null;
        let caption: string | null = null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
        if (media.photo || media.className === 'MessageMediaPhoto') {
          mediaType = 'photo';
          mimeType = 'image/jpeg'; // Telegram –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JPEG –¥–ª—è —Ñ–æ—Ç–æ
          fileName = 'photo.jpg';
          caption = media.caption || text || '';
          if (!text) text = 'üì∑ Photo';
        } else if (media.video || (media.className === 'MessageMediaDocument' && media.mimeType?.startsWith('video/'))) {
          mediaType = 'video';
          mimeType = media.mimeType || 'video/mp4';
          fileName = media.fileName || 'video.mp4';
          caption = media.caption || text || '';
          if (!text) text = 'üé• Video';
        } else if (media.className === 'MessageMediaDocument' && (media.mimeType === 'audio/ogg' || media.mimeType === 'audio/x-voice' || media.voice)) {
          mediaType = 'voice';
          mimeType = media.mimeType || 'audio/ogg';
          fileName = 'voice.ogg';
          caption = text || '';
          if (!text) text = 'üé§ Voice message';
        } else if (media.className === 'MessageMediaDocument' && media.mimeType?.startsWith('audio/') && !media.voice) {
          mediaType = 'audio';
          mimeType = media.mimeType;
          fileName = media.fileName || 'audio';
          caption = media.caption || text || '';
          if (!text) text = 'üéµ Audio file';
        } else if (media.className === 'MessageMediaDocument' && !media.mimeType?.startsWith('video/') && !media.mimeType?.startsWith('audio/')) {
          mediaType = 'document';
          mimeType = media.mimeType || 'application/octet-stream';
          fileName = media.fileName || 'file';
          caption = media.caption || text || '';
          if (!text) text = 'üìé Document';
        } else if (media.sticker || media.className === 'MessageMediaSticker') {
          mediaType = 'sticker';
          mimeType = 'image/webp'; // Stickers –æ–±—ã—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WebP
          fileName = 'sticker.webp';
          if (!text) text = 'üòÄ Sticker';
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ attachments
        if (mediaType) {
          attachments.push({
            type: mediaType,
            media: media,
            caption: caption || '',
            mimeType: mimeType,
            fileName: fileName,
          });
          
          // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ S3
          try {
            this.logger.log(`üì• Downloading ${mediaType} from Telegram...`);
            const buffer = await this.client.downloadMedia(message, {});
            
            if (buffer && Buffer.isBuffer(buffer)) {
              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º S3 –∫–ª—é—á (–∏—Å–ø–æ–ª—å–∑—É–µ–º chatId, threadId –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è thread)
              // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è thread –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å object_key –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
              const threadPrefix = `inbox/telegram_${chatId}/`;
              const s3Key = await this.uploadMediaToS3(buffer, threadPrefix, fileName!, mimeType!);
              
              if (s3Key) {
                objectKey = s3Key;
                this.logger.log(`‚úÖ Media uploaded to S3: ${objectKey}`);
              } else {
                this.logger.warn(`‚ö†Ô∏è Failed to upload media to S3`);
              }
            } else {
              this.logger.warn(`‚ö†Ô∏è Downloaded media is not a Buffer: ${typeof buffer}`);
            }
          } catch (error: any) {
            this.logger.error(`‚ùå Error downloading/uploading media: ${error.message}`);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –º–µ–¥–∏–∞
      if (!text) {
        text = '[Media]';
      }

      // Get chat info - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
      let chatTitle = 'Unknown';
      let senderName = 'Unknown';
      let senderPhone = null;
      let senderUsername = null;
      let senderFirstName = null;
      let senderLastName = null;
      let peerIdData = null; // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è telegramPeerId

      this.logger.log(`üîç DEBUG: Starting chat info extraction - chatId: ${chatId}, senderId: ${senderId || 'null'}`);

      // –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ message._sender (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
      this.logger.log(`üîç DEBUG: Method 1 - Checking message._sender...`);
      try {
        const sender = message._sender;
        this.logger.log(`üîç DEBUG: Method 1 - message._sender value: ${sender ? 'exists' : 'null/undefined'}`);
        if (sender) {
          senderFirstName = sender.firstName || null;
          senderLastName = sender.lastName || null;
          senderUsername = sender.username || null;
          senderPhone = sender.phone || null;
          senderName = `${senderFirstName || ''} ${senderLastName || ''}`.trim() || senderUsername || senderPhone || 'Unknown';
          
          this.logger.log(`üîç DEBUG: Method 1 - Extracted: firstName=${senderFirstName}, lastName=${senderLastName}, username=${senderUsername}, phone=${senderPhone}, senderName=${senderName}`);
          
          if (senderName !== 'Unknown') {
            chatTitle = senderName;
            this.logger.log(`‚úÖ Got sender info from message._sender: ${senderName}`);
          } else {
            this.logger.log(`‚ö†Ô∏è Method 1 - senderName is still Unknown`);
          }
        } else {
          this.logger.log(`‚ö†Ô∏è Method 1 - message._sender is null/undefined`);
        }
      } catch (error) {
        this.logger.warn(`‚ùå Method 1 - Could not extract from message._sender: ${error}`);
      }

      // –°–ø–æ—Å–æ–± 2a: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –∏–∑ message._entities (–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
      if ((chatTitle === 'Unknown' || senderName === 'Unknown') && message._entities) {
        this.logger.log(`üîç DEBUG: Method 2a - Checking message._entities...`);
        try {
          for (const entity of message._entities || []) {
            if (entity.className === 'User' && entity.id) {
              const userId = String(entity.id);
              if (userId === String(chatId) || userId === String(senderId)) {
                this.logger.log(`üîç DEBUG: Method 2a - Found User entity: id=${entity.id}, firstName=${entity.firstName}, lastName=${entity.lastName}, username=${entity.username}`);
                if (!senderFirstName && entity.firstName) senderFirstName = entity.firstName;
                if (!senderLastName && entity.lastName) senderLastName = entity.lastName;
                if (!senderUsername && entity.username) senderUsername = entity.username;
                if (!senderPhone && entity.phone) senderPhone = entity.phone;
                
                const name = `${senderFirstName || ''} ${senderLastName || ''}`.trim() || senderUsername || senderPhone;
                if (name && senderName === 'Unknown') {
                  senderName = name;
                  chatTitle = name;
                  this.logger.log(`‚úÖ Method 2a - Got info from _entities: ${senderName}`);
                  break;
                }
              }
            }
          }
        } catch (error: any) {
          this.logger.warn(`‚ùå Method 2a - Error extracting from _entities: ${error.message || error}`);
        }
      }

      // –°–ø–æ—Å–æ–± 2b: –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ getEntity –¥–ª—è chatId (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
      if ((chatTitle === 'Unknown' || senderName === 'Unknown') && this.client) {
        this.logger.log(`üîç DEBUG: Method 2b - Calling getEntity for chatId: ${chatId}`);
        try {
          // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å InputPeerUser –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          let entity = null;
          
          // –ï—Å–ª–∏ –≤ message –µ—Å—Ç—å peerId —Å accessHash, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (message.peerId && message.peerId.userId) {
            try {
              entity = new Api.InputPeerUser({
                userId: bigInt(message.peerId.userId),
                accessHash: bigInt(message.peerId.accessHash || '0'),
              });
              this.logger.log(`üîç DEBUG: Method 2b - Created InputPeerUser from peerId`);
            } catch (e) {
              this.logger.debug(`‚ö†Ô∏è Method 2b - Could not create InputPeerUser from peerId: ${e}`);
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π getEntity (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
          if (!entity) {
            try {
              entity = await this.client.getEntity(chatId);
              this.logger.log(`üîç DEBUG: Method 2b - getEntity succeeded, entity className: ${(entity as any).className || 'unknown'}`);
            } catch (getEntityError: any) {
              // –î–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ getEntity –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
              this.logger.warn(`‚ö†Ô∏è Method 2b - getEntity failed (expected for new chats): ${getEntityError.message || getEntityError}`);
              // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ getDialogs (—Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤)
              try {
                this.logger.log(`üîç DEBUG: Method 2c - Trying getDialogs to find chat ${chatId}...`);
                const dialogs = await this.client.getDialogs({ limit: 200 });
                const foundDialog = dialogs.find((d: any) => {
                  const dId = d.entity?.id?.toString() || d.id?.toString();
                  return dId === String(chatId);
                });
                if (foundDialog && foundDialog.entity) {
                  entity = foundDialog.entity;
                  this.logger.log(`‚úÖ Method 2c - Found in dialogs: className=${(entity as any).className || 'unknown'}`);
                  
                  // –°–æ–∑–¥–∞–µ–º telegramPeerId –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ entity
                  if (!peerIdData) {
                    if ((entity as any).className === 'User') {
                      const userId = (entity as any).id;
                      const accessHash = (entity as any).accessHash || '0';
                      if (userId) {
                        const serialized: any = {
                          _: 'InputPeerUser',
                          userId: String(userId),
                          accessHash: String(accessHash)
                        };
                        peerIdData = JSON.stringify(serialized);
                        this.logger.log(`‚úÖ Method 2c - Created telegramPeerId from dialog entity: ${peerIdData}`);
                      }
                    } else if ((entity as any).className === 'Chat') {
                      const chatId_ = (entity as any).id;
                      if (chatId_) {
                        const serialized: any = {
                          _: 'InputPeerChat',
                          chatId: String(chatId_)
                        };
                        peerIdData = JSON.stringify(serialized);
                        this.logger.log(`‚úÖ Method 2c - Created telegramPeerId from dialog entity: ${peerIdData}`);
                      }
                    } else if ((entity as any).className === 'Channel') {
                      const channelId = (entity as any).id;
                      const accessHash = (entity as any).accessHash || '0';
                      if (channelId) {
                        const serialized: any = {
                          _: 'InputPeerChannel',
                          channelId: String(channelId),
                          accessHash: String(accessHash)
                        };
                        peerIdData = JSON.stringify(serialized);
                        this.logger.log(`‚úÖ Method 2c - Created telegramPeerId from dialog entity: ${peerIdData}`);
                      }
                    }
                  }
                } else {
                  this.logger.warn(`‚ö†Ô∏è Method 2c - Chat ${chatId} not found in dialogs`);
                }
              } catch (dialogsError: any) {
                this.logger.warn(`‚ö†Ô∏è Method 2c - getDialogs failed: ${dialogsError.message || dialogsError}`);
              }
            }
          }
          
          if (entity) {
            this.logger.log(`üîç DEBUG: Method 2b - Processing entity, className: ${(entity as any).className || 'unknown'}`);
            const entityTitle = (entity as any).title || (entity as any).firstName || null;
            const entityFirstName = (entity as any).firstName || null;
            const entityLastName = (entity as any).lastName || null;
            const entityUsername = (entity as any).username || null;
            const entityPhone = (entity as any).phone || null;
            
            this.logger.log(`üîç DEBUG: Method 2b - Entity data: title=${entityTitle}, firstName=${entityFirstName}, lastName=${entityLastName}, username=${entityUsername}, phone=${entityPhone}`);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç (User), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if ((entity as any).className === 'User') {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
              if (!senderFirstName) senderFirstName = entityFirstName;
              if (!senderLastName) senderLastName = entityLastName;
              if (!senderUsername) senderUsername = entityUsername;
              if (!senderPhone) senderPhone = entityPhone;
            
              const name = `${senderFirstName || ''} ${senderLastName || ''}`.trim() || senderUsername || senderPhone;
              if (name && senderName === 'Unknown') {
                senderName = name;
                chatTitle = name;
              } else if (entityTitle && chatTitle === 'Unknown') {
                chatTitle = entityTitle;
              }
          } else if (entityTitle && chatTitle === 'Unknown') {
            // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º title
            chatTitle = entityTitle;
          }
          
            this.logger.log(`‚úÖ Got entity info: chatTitle=${chatTitle}, senderName=${senderName}`);
          } else {
            this.logger.warn(`‚ö†Ô∏è Method 2b - Could not get entity (new chat or access denied)`);
            }
          } catch (error: any) {
          this.logger.warn(`‚ùå Method 2b - Could not fetch chat info for ${chatId}: ${error.message || error}`);
          this.logger.warn(`‚ùå Method 2b - Error details: ${JSON.stringify({ name: error.name, message: error.message, stack: error.stack?.substring(0, 200) })}`);
        }
      } else {
        if (!this.client) {
          this.logger.warn(`‚ö†Ô∏è Method 2 - Skipped: this.client is null/undefined`);
        } else {
          this.logger.log(`‚ö†Ô∏è Method 2 - Skipped: chatTitle=${chatTitle}, senderName=${senderName} (already resolved)`);
        }
      }

      // –°–ø–æ—Å–æ–± 3: –ï—Å–ª–∏ senderId –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å sender –æ—Ç–¥–µ–ª—å–Ω–æ
      if (senderId && (senderName === 'Unknown' || chatTitle === 'Unknown') && this.client) {
        this.logger.log(`üîç DEBUG: Method 3 - Calling getEntity for senderId: ${senderId}`);
        try {
          const sender = await this.client.getEntity(senderId);
          this.logger.log(`üîç DEBUG: Method 3 - getEntity succeeded, sender className: ${(sender as any).className || 'unknown'}`);
          const fetchedFirstName = (sender as any).firstName || null;
          const fetchedLastName = (sender as any).lastName || null;
          const fetchedUsername = (sender as any).username || null;
          const fetchedPhone = (sender as any).phone || null;
          
          this.logger.log(`üîç DEBUG: Method 3 - Sender data: firstName=${fetchedFirstName}, lastName=${fetchedLastName}, username=${fetchedUsername}, phone=${fetchedPhone}`);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏
          if (!senderFirstName) senderFirstName = fetchedFirstName;
          if (!senderLastName) senderLastName = fetchedLastName;
          if (!senderUsername) senderUsername = fetchedUsername;
          if (!senderPhone) senderPhone = fetchedPhone;
          
          const name = `${senderFirstName || ''} ${senderLastName || ''}`.trim() || senderUsername || senderPhone;
          if (name && senderName === 'Unknown') {
            senderName = name;
            if (chatTitle === 'Unknown') {
              chatTitle = senderName;
            }
          }
          
          this.logger.log(`‚úÖ Extracted sender info separately: ${senderName} (@${senderUsername || 'N/A'}, ${senderPhone || 'N/A'})`);
        } catch (error: any) {
          this.logger.warn(`‚ùå Method 3 - Could not fetch sender info for ${senderId}: ${error.message || error}`);
          this.logger.warn(`‚ùå Method 3 - Error details: ${JSON.stringify({ name: error.name, message: error.message, stack: error.stack?.substring(0, 200) })}`);
        }
      } else {
        if (!senderId) {
          this.logger.log(`‚ö†Ô∏è Method 3 - Skipped: senderId is null/undefined`);
        } else if (!this.client) {
          this.logger.warn(`‚ö†Ô∏è Method 3 - Skipped: this.client is null/undefined`);
        } else {
          this.logger.log(`‚ö†Ô∏è Method 3 - Skipped: chatTitle=${chatTitle}, senderName=${senderName} (already resolved)`);
        }
      }
      
      // –°–ø–æ—Å–æ–± 4: Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º username, phone –∏–ª–∏ external_chat_id –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ Unknown
      if (chatTitle === 'Unknown' && senderName === 'Unknown') {
        if (senderUsername) {
          chatTitle = `@${senderUsername}`;
          senderName = `@${senderUsername}`;
        } else if (senderPhone) {
          chatTitle = senderPhone;
          senderName = senderPhone;
        } else if (chatId) {
          chatTitle = `Chat ${chatId}`;
          senderName = `Chat ${chatId}`;
        }
        this.logger.log(`‚ö†Ô∏è Using fallback name: ${chatTitle}`);
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ chatTitle –≤—Å–µ –µ—â–µ Unknown, –Ω–æ senderName –µ—Å—Ç—å
      if (chatTitle === 'Unknown' && senderName !== 'Unknown') {
        chatTitle = senderName;
        this.logger.log(`‚úÖ Final check - Updated chatTitle from senderName: ${chatTitle}`);
      }
      
      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ findOrCreateThread
      this.logger.log(`üîç DEBUG: Final chat info before findOrCreateThread: chatTitle=${chatTitle}, senderName=${senderName}, firstName=${senderFirstName}, lastName=${senderLastName}, username=${senderUsername}, phone=${senderPhone}`);

      // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º InputPeer –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
      // –ë–µ—Ä–µ–º accessHash –Ω–∞–ø—Ä—è–º—É—é –∏–∑ message._sender (–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –Ω–∞–ø—Ä—è–º—É—é
      // peerIdData —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ (—Å—Ç—Ä–æ–∫–∞ 271), –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Method 2c
      
      // –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑ message._sender (–±—ã—Å—Ç—Ä–µ–µ, –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
      if (!peerIdData) {
        try {
          const sender = message._sender;
          this.logger.debug(`üîç Checking message._sender: ${sender ? `id=${sender.id}, hasAccessHash=${!!sender.accessHash}` : 'null'}`);
          
          if (sender && sender.id) {
            if (sender.accessHash) {
          const serialized: any = {
            _: 'InputPeerUser',
            userId: String(sender.id),
              accessHash: String(sender.accessHash)
          };
          
          peerIdData = JSON.stringify(serialized);
            this.logger.log(`‚úÖ Saved InputPeer from message._sender: ${peerIdData}`);
        } else {
            this.logger.warn(`‚ö†Ô∏è message._sender exists but no accessHash for userId=${sender.id}`);
          }
        }
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Could not extract InputPeer from message._sender: ${error}`);
        }
      }
      
      // –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ _sender, –ø–æ–ª—É—á–∞–µ–º entity –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ getEntity
      if (!peerIdData && this.client && chatId) {
        this.logger.log(`üîç Trying getEntity for chatId=${chatId} to get InputPeer`);
        try {
          const entity = await this.client.getEntity(chatId);
          this.logger.debug(`‚úÖ Got entity from getEntity: className=${(entity as any).className}, id=${(entity as any).id}, hasAccessHash=${!!(entity as any).accessHash}`);
          
          if ((entity as any).className === 'User') {
            const userId = (entity as any).id;
            const accessHash = (entity as any).accessHash;
            
            if (userId && accessHash) {
              const serialized: any = {
                _: 'InputPeerUser',
                userId: String(userId),
                accessHash: String(accessHash)
              };
              
              peerIdData = JSON.stringify(serialized);
              this.logger.log(`üì¶ Saved InputPeer from getEntity: ${peerIdData}`);
            } else {
              this.logger.warn(`‚ö†Ô∏è Entity from getEntity missing userId or accessHash`);
            }
          } else if ((entity as any).className === 'Chat') {
            const chatId_ = (entity as any).id;
            const serialized: any = {
              _: 'InputPeerChat',
              chatId: String(chatId_)
            };
            peerIdData = JSON.stringify(serialized);
            this.logger.log(`üì¶ Saved InputPeerChat from getEntity: ${peerIdData}`);
          } else if ((entity as any).className === 'Channel') {
            const channelId = (entity as any).id;
            const accessHash = (entity as any).accessHash;
            if (channelId && accessHash) {
              const serialized: any = {
                _: 'InputPeerChannel',
                channelId: String(channelId),
                accessHash: String(accessHash)
              };
              peerIdData = JSON.stringify(serialized);
              this.logger.log(`üì¶ Saved InputPeerChannel from getEntity: ${peerIdData}`);
            }
          }
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Could not get entity via getEntity for ${chatId}: ${error}`);
        }
      }
      
      if (!peerIdData) {
        this.logger.error(`‚ùå Could not save InputPeer for chat ${chatId} - messages to this chat will fail!`);
        this.logger.error(`‚ùå Details: senderName=${senderName}, chatTitle=${chatTitle}, hasMessageSender=${!!message._sender}`);
      } else {
        this.logger.log(`‚úÖ Successfully extracted telegramPeerId for chat ${chatId}`);
      }

      const payload = {
        platform: 'telegram',
        chatId: String(chatId),
        messageId: String(messageId),
        senderId: senderId ? String(senderId) : null,
        senderName,
        senderPhone,
        senderUsername,
        senderFirstName,
        senderLastName,
        chatTitle,
        text,
        attachments,
        objectKey, // S3 –∫–ª—é—á –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
        timestamp: message.date * 1000,
        telegramPeerId: peerIdData,
        raw: message,
      };

      this.logger.log(`üì® Incoming Telegram message from ${senderName} in ${chatTitle}`);
      this.logger.log(`üìã Payload summary: chatTitle="${chatTitle}", telegramPeerId=${peerIdData ? 'present' : 'null'}, senderUsername=${senderUsername || 'null'}, senderPhone=${senderPhone || 'null'}`);
      this.logger.debug(`üì§ Payload text field: "${text}" (type: ${typeof text})`);

      // Send to backend API
      const backendUrl = process.env.BACKEND_URL || 'http://localhost:3001';
      const serviceJwt = process.env.SERVICE_JWT;

      if (!serviceJwt) {
        this.logger.error('‚ùå SERVICE_JWT not set. Cannot forward message to backend.');
        return;
      }

      const url = `${backendUrl}/api/inbox/events/telegram`;
      this.logger.debug(`üì° Sending to: ${url}`);
      this.logger.debug(`üîë Service JWT (first 10 chars): ${serviceJwt.substring(0, 10)}...`);

      await axios.post(url, payload, {
        headers: {
          Authorization: `Bearer ${serviceJwt}`,
          'Content-Type': 'application/json',
        },
      });

      this.logger.debug(`‚úÖ Message forwarded to backend API`);
    } catch (error: any) {
      this.logger.error('‚ùå Error processing incoming message:', error.message);
      if (error.response) {
        this.logger.error(`Response status: ${error.response.status}`);
        this.logger.error(`Response data:`, error.response.data);
      }
    }
  }

  private async resolveEntity(chatId: string | number, telegramPeerId?: string | null): Promise<any> {
    if (!this.client || !this.isReady) {
      throw new Error('Telegram client not ready');
    }

    let entity;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π InputPeer, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    if (telegramPeerId) {
      try {
        const parsed = JSON.parse(telegramPeerId);
        this.logger.log(`üîß Reconstructing InputPeer: ${parsed._}`);
        
        // –í–æ—Å—Å–æ–∑–¥–∞–µ–º InputPeer –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (parsed._ === 'InputPeerUser') {
          entity = new Api.InputPeerUser({
            userId: bigInt(parsed.userId),
            accessHash: bigInt(parsed.accessHash || '0'),
          });
        } else if (parsed._ === 'InputPeerChat') {
          entity = new Api.InputPeerChat({
            chatId: bigInt(parsed.chatId),
          });
        } else if (parsed._ === 'InputPeerChannel') {
          entity = new Api.InputPeerChannel({
            channelId: bigInt(parsed.channelId),
            accessHash: bigInt(parsed.accessHash || '0'),
          });
        } else {
          throw new Error(`Unknown InputPeer type: ${parsed._}`);
        }
        
        this.logger.log(`‚úÖ Reconstructed InputPeer successfully`);
        return entity;
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Failed to reconstruct InputPeer (${error}), falling back to getEntity for ${chatId}`);
        }
      }
      
      // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –Ω–∞–ø—Ä—è–º—É—é
      if (!entity) {
        this.logger.log(`üîç No saved InputPeer (telegramPeerId=${telegramPeerId || 'null'}), trying getEntity for ${chatId}`);
        try {
          entity = await this.client.getEntity(chatId);
          this.logger.log(`‚úÖ Successfully got entity via getEntity`);
        } catch (getEntityError: any) {
          // –î–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ getEntity –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ getDialogs
          this.logger.warn(`‚ö†Ô∏è getEntity failed (expected for new chats): ${getEntityError.message}`);
          this.logger.log(`üîç Method 2c - Trying getDialogs to find chat ${chatId}...`);
          try {
            const dialogs = await this.client.getDialogs({ limit: 200 });
            const foundDialog = dialogs.find((d: any) => {
              const dId = d.entity?.id?.toString() || d.id?.toString();
              return dId === String(chatId);
            });
            if (foundDialog && foundDialog.entity) {
              entity = foundDialog.entity;
              this.logger.log(`‚úÖ Method 2c - Found in dialogs: className=${(entity as any).className || 'unknown'}`);
              
              // –°–æ–∑–¥–∞–µ–º InputPeer –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ entity
              if ((entity as any).className === 'User') {
                entity = new Api.InputPeerUser({
                  userId: bigInt((entity as any).id),
                  accessHash: bigInt((entity as any).accessHash || '0'),
                });
                this.logger.log(`‚úÖ Created InputPeerUser from dialog entity`);
              } else if ((entity as any).className === 'Chat') {
                entity = new Api.InputPeerChat({
                  chatId: bigInt((entity as any).id),
                });
                this.logger.log(`‚úÖ Created InputPeerChat from dialog entity`);
              } else if ((entity as any).className === 'Channel') {
                entity = new Api.InputPeerChannel({
                  channelId: bigInt((entity as any).id),
                  accessHash: bigInt((entity as any).accessHash || '0'),
                });
                this.logger.log(`‚úÖ Created InputPeerChannel from dialog entity`);
              }
            } else {
              this.logger.warn(`‚ö†Ô∏è Method 2c - Chat ${chatId} not found in dialogs`);
              throw new Error(`Cannot resolve chat entity: ${getEntityError.message}. Need valid telegramPeerId for this chat.`);
            }
          } catch (dialogsError: any) {
            this.logger.error(`‚ùå Method 2c - getDialogs failed: ${dialogsError.message || dialogsError}`);
            throw new Error(`Cannot resolve chat entity: ${getEntityError.message}. Need valid telegramPeerId for this chat.`);
          }
        }
      }
    
    if (!entity) {
      throw new Error('Failed to resolve entity for sending message');
    }

    return entity;
  }

  async sendMessage(chatId: string | number, text: string, telegramPeerId?: string | null): Promise<any> {
    if (!this.client || !this.isReady) {
      throw new Error('Telegram client not ready');
    }

    try {
      this.logger.log(`üì§ Sending message to chat ${chatId}`);
      
      const entity = await this.resolveEntity(chatId, telegramPeerId);
      
      const result = await this.client.sendMessage(entity, {
        message: text,
      });

      this.logger.log(`‚úÖ Message sent successfully: ${result.id}`);
      return result;
    } catch (error: any) {
      this.logger.error(`‚ùå Failed to send message to ${chatId}:`, error);
      this.logger.error(`Error details: ${error.message || JSON.stringify(error)}`);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ S3
   */
  private async uploadMediaToS3(
    buffer: Buffer,
    prefix: string,
    fileName: string,
    contentType: string
  ): Promise<string | null> {
    try {
      const key = `${prefix}${uuidv4()}_${fileName}`;
      
      await this.s3Service.putObject(key, buffer, contentType);
      return key;
    } catch (error: any) {
      this.logger.error(`‚ùå Failed to upload media to S3: ${error.message}`);
      return null;
    }
  }

  async sendMessageWithFile(
    chatId: string | number,
    text: string,
    objectKey: string,
    telegramPeerId?: string | null
  ): Promise<any> {
    if (!this.client || !this.isReady) {
      throw new Error('Telegram client not ready');
    }

    let tempFilePath: string | null = null;

    try {
      this.logger.log(`üì§ Starting sendMessageWithFile: chatId=${chatId}, objectKey=${objectKey}, hasPeerId=${!!telegramPeerId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ objectKey –≤–∞–ª–∏–¥–Ω—ã–π
      if (!objectKey || objectKey.trim() === '') {
        throw new Error('objectKey is empty or invalid');
      }
      
      this.logger.log(`üîç Resolving entity for chatId=${chatId}...`);
      const entity = await this.resolveEntity(chatId, telegramPeerId);
      this.logger.log(`‚úÖ Entity resolved successfully`);

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ S3 –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      this.logger.log(`üì• Downloading file from S3: ${objectKey}`);
      const fileData = await this.s3Service.getObject(objectKey);
      const buffer = fileData.body;
      
      if (!buffer || buffer.length === 0) {
        throw new Error(`Downloaded file is empty: ${objectKey}`);
      }
      
      this.logger.log(`‚úÖ File downloaded from S3: ${buffer.length} bytes`);
      
      // –ü–æ–ª—É—á–∞–µ–º MIME —Ç–∏–ø –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö S3 –∏–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ getObject
      const contentType = fileData.contentType || 'application/octet-stream';
      this.logger.log(`üìé File type: ${contentType}`);

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const tempDir = os.tmpdir();
      const fileName = path.basename(objectKey);
      tempFilePath = path.join(tempDir, `tg-${Date.now()}-${fileName}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      fs.writeFileSync(tempFilePath, buffer);

      this.logger.log(`üì• File downloaded to: ${tempFilePath}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ MIME —Ç–∏–ø—É
      let fileOptions: any = {
        file: tempFilePath,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (text && text.trim()) {
        fileOptions.caption = text;
      }

      // –î–ª—è —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      if (contentType.startsWith('image/')) {
        fileOptions.forceDocument = false; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
      } else {
        fileOptions.forceDocument = true; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telethon
      const result = await this.client.sendFile(entity, fileOptions);

      this.logger.log(`‚úÖ Message with file sent successfully: ${result.id}`);
      return result;
    } catch (error: any) {
      this.logger.error(`‚ùå Failed to send message with file to ${chatId}:`, error);
      this.logger.error(`Error details: ${error.message || JSON.stringify(error)}`);
      throw error;
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      if (tempFilePath && fs.existsSync(tempFilePath)) {
        try {
          fs.unlinkSync(tempFilePath);
          this.logger.log(`üóëÔ∏è Temporary file deleted: ${tempFilePath}`);
        } catch (cleanupError) {
          this.logger.warn(`‚ö†Ô∏è Failed to delete temporary file: ${cleanupError}`);
        }
      }
    }
  }

  async getStatus(): Promise<{ connected: boolean; username?: string }> {
    if (!this.client || !this.isReady) {
      return { connected: false };
    }

    try {
      const me = await this.client.getMe();
      return {
        connected: true,
        username: (me as any).username || undefined,
      };
    } catch (error) {
      return { connected: false };
    }
  }

  // Stub methods for compatibility with MessengersService
  async initConnection(userId: string, data?: Record<string, unknown>): Promise<any> {
    this.logger.warn('‚ö†Ô∏è initConnection called for Telegram - manual setup required');
    return {
      success: false,
      message: 'Telegram requires manual authentication via telegram-login script',
      instructions: 'Run: npm run start:tg-login in Render Shell',
    };
  }

  async getQrCode(userId: string): Promise<any> {
    this.logger.warn('‚ö†Ô∏è Telegram QR authentication not fully implemented yet');
    
    // For now, return instructions to use telegram-login script in Render Shell
    throw new Error(
      'Telegram authentication requires manual setup. ' +
      'Please contact administrator to run: npm run start:tg-login in Render Shell'
    );
  }

  async verifyConnection(userId: string): Promise<boolean> {
    return this.isReady;
  }

  async getAccountInfo(userId: string): Promise<any> {
    if (!this.client || !this.isReady) {
      return null;
    }

    try {
      const me = await this.client.getMe();
      return {
        id: (me as any).id,
        firstName: (me as any).firstName,
        lastName: (me as any).lastName || '',
        username: (me as any).username || '',
        phoneNumber: (me as any).phone || '',
      };
    } catch (error) {
      this.logger.error('Failed to get account info:', error);
      return null;
    }
  }

  async disconnect(userId: string): Promise<void> {
    this.logger.log('üîå Disconnect requested - closing Telegram client');
    if (this.client) {
      await this.client.disconnect();
      this.isReady = false;
    }
  }
}










