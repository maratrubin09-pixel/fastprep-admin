"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadsController = void 0;
const common_1 = require("@nestjs/common");
const s3_service_1 = require("../storage/s3.service");
const pep_guard_1 = require("../authz/pep.guard");
// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
const ALLOWED_TYPES = [
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    'image/jpeg',
    'image/jpg',
    'image/png',
    'image/gif',
    'image/webp',
    'image/heic',
    'image/heif',
    'image/bmp',
    'image/svg+xml',
    // –í–∏–¥–µ–æ
    'video/mp4',
    'video/quicktime', // .mov
    'video/x-msvideo', // .avi
    'video/webm',
    // –ê—É–¥–∏–æ
    'audio/mpeg',
    'audio/mp3',
    'audio/wav',
    'audio/ogg',
    'audio/webm',
    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    'application/pdf',
    'application/msword', // .doc
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx
    'application/vnd.ms-excel', // .xls
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
];
const MAX_SIZE = 10 * 1024 * 1024; // 10 MB
class PresignRequestDto {
    threadId;
    filename;
    contentType;
    size;
}
let UploadsController = class UploadsController {
    s3;
    constructor(s3) {
        this.s3 = s3;
    }
    /**
     * POST /api/inbox/uploads/presign
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { putUrl, objectKey, expiresIn }
     * –û—à–∏–±–∫–∏: TYPE_NOT_ALLOWED, SIZE_EXCEEDED
     */
    async presign(dto) {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üì• Presign request received:', {
                threadId: dto?.threadId,
                filename: dto?.filename,
                contentType: dto?.contentType,
                size: dto?.size,
                allKeys: Object.keys(dto || {}),
            });
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π (camelCase –∏ snake_case)
            const threadId = dto?.threadId || dto?.thread_id;
            const filename = dto?.filename || dto?.fileName;
            const contentType = dto?.contentType || dto?.content_type;
            const size = dto?.size;
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!threadId || !filename || !contentType || typeof contentType !== 'string') {
                console.error('‚ùå Missing required fields:', { threadId: !!threadId, filename: !!filename, contentType: !!contentType });
                throw new common_1.BadRequestException({
                    code: 'INVALID_REQUEST',
                    message: 'Missing required fields: threadId, filename, contentType',
                    received: {
                        threadId: !!threadId,
                        filename: !!filename,
                        contentType: !!contentType,
                        allFields: Object.keys(dto || {}),
                    }
                });
            }
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º contentType (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
            const normalizedContentType = contentType.trim().toLowerCase();
            console.log('‚úÖ Validated fields:', { threadId, filename, contentType: normalizedContentType, size });
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const normalizedAllowedTypes = ALLOWED_TYPES.map(t => t.toLowerCase());
            // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å image/, video/, audio/ –∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
            const isAllowed = normalizedAllowedTypes.includes(normalizedContentType) ||
                normalizedContentType.startsWith('image/') ||
                normalizedContentType.startsWith('video/') ||
                normalizedContentType.startsWith('audio/');
            if (!isAllowed) {
                throw new common_1.BadRequestException({
                    code: 'TYPE_NOT_ALLOWED',
                    message: `Content type not allowed: ${normalizedContentType}. Allowed: images, videos, audio, and documents`
                });
            }
            if (size && size > MAX_SIZE) {
                throw new common_1.BadRequestException({ code: 'SIZE_EXCEEDED', message: 'File size exceeds limit' });
            }
            const prefix = `inbox/${threadId}/`;
            const result = await this.s3.createPresignedPut(prefix, filename, normalizedContentType, 600);
            console.log('‚úÖ Presigned URL generated:', result.objectKey);
            return result;
        }
        catch (error) {
            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ BadRequestException, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            if (error instanceof common_1.BadRequestException) {
                throw error;
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.error('Error in presign endpoint:', error);
            throw new common_1.BadRequestException({
                code: 'SERVER_ERROR',
                message: error.message || 'Failed to generate upload URL'
            });
        }
    }
    /**
     * GET /api/inbox/uploads/download/:key
     * –ü–æ–ª—É—á–∏—Ç—å presigned URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
     * –ï—Å–ª–∏ –µ—Å—Ç—å query –ø–∞—Ä–∞–º–µ—Ç—Ä ?url=true, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å URL –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
     */
    async download(key, req, res) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å inbox/
        if (!key.startsWith('inbox/')) {
            throw new common_1.BadRequestException('Invalid file key');
        }
        try {
            // –ü–æ–ª—É—á–∞–µ–º presigned URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å)
            const downloadUrl = await this.s3.createPresignedGet(key, 3600);
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å ?url=true, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ img src)
            if (req.query?.url === 'true') {
                return res.json({ url: downloadUrl });
            }
            // –ò–Ω–∞—á–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ presigned URL (–¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
            res.redirect(downloadUrl);
        }
        catch (err) {
            throw new common_1.BadRequestException(err.message || 'Failed to generate download URL');
        }
    }
};
exports.UploadsController = UploadsController;
__decorate([
    (0, common_1.Post)('presign'),
    (0, common_1.UseGuards)(pep_guard_1.PepGuard),
    (0, pep_guard_1.RequirePerm)('inbox.send_message'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], UploadsController.prototype, "presign", null);
__decorate([
    (0, common_1.Get)('download/:key(*)'),
    (0, common_1.UseGuards)(pep_guard_1.PepGuard),
    (0, pep_guard_1.RequirePerm)('inbox.view'),
    __param(0, (0, common_1.Param)('key')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], UploadsController.prototype, "download", null);
exports.UploadsController = UploadsController = __decorate([
    (0, common_1.Controller)('inbox/uploads'),
    __metadata("design:paramtypes", [s3_service_1.S3Service])
], UploadsController);
//# sourceMappingURL=uploads.controller.js.map